// Build file for Solr as part of OpenESP
def fullName = "solr-${solrVersion}"
// TODO: Use the nearest mirror suggested by http://www.apache.org/dyn/closer.cgi
// Parse out the first match for <strong>(.*?)</strong> from the text
def binUrl = "http://www.eu.apache.org/dist/lucene/solr/$solrVersion/${fullName}.zip"
def buildDir = 'build'
def warName = "${fullName}.war"
def zipName = "${fullName}.zip"
def zipPath = "${tmpDir}/${zipName}"
def unzippedPath = "${buildDir}/${fullName}"
def warPath = "${unzippedPath}/dist/${warName}"
def deployDir = "${buildDir}/openesp"

defaultTasks 'organizeForOpenESP' 

task clean {
	doLast {
		delete buildDir
	} 
}

task init {
	outputs.dir buildDir
	doLast {
		mkdir buildDir
	}
}

task getSolr (dependsOn: 'init') {
	outputs.file "${zipPath}"
	doLast {
    println "Downloading Solr ${solrVersion} into ${tmpDir}"
		ant {
			get src:binUrl,
			dest:tmpDir, verbose:"false"
		}
	}
}

task unpackSolr (dependsOn: 'getSolr') {
	outputs.dir "${unzippedPath}"
	doLast {
    println "Unpacking Solr into ${buildDir}"
		copy {
			from zipTree(zipPath)
			into "${buildDir}"
		}
	}
}

task organizeForOpenESP (dependsOn: 'unpackSolr') {
	outputs.file "${deployDir}/tomcat/conf/Catalina/localhost/solr.xml"
	doLast {
		copy {
			from warPath
			into "${deployDir}/webapps"
			rename warName, 'solr.war'
		}
		copy {
			from 'solr-tomcat-context.xml'
			into "${deployDir}/tomcat/conf/Catalina/localhost"
			rename 'solr-tomcat-context.xml', "solr.xml"
		}
		copy {
			from "${unzippedPath}/example/solr"
			into "${deployDir}/conf/solr"
		}
		copy {
			from ("${unzippedPath}/dist") {
			  include '*.jar'
			}
			into "${deployDir}/lib/solr"
		}
		copy {
			from ("${unzippedPath}/contrib/") {
			  include '**/*.jar'
			}
			includeEmptyDirs = false
			into "${deployDir}/lib/solr"
			eachFile {details ->
        // Top Level Modules
        def targetPath = flatten(details.path)
        details.path = targetPath
      }
    }
		copy {
			from "${unzippedPath}/example/exampledocs/post.jar"
			into "${deployDir}/bin"
		}
		// Issue #29, upgrade to Solr 4.3 - need slf4j and log4j init
		copy {
			from "${unzippedPath}/example/lib/ext"
			into "${deployDir}/tomcat/lib/logging"
		}
		new File("${deployDir}/logs/solr").mkdirs()
	}
}

def flatten(def path) {
  // Standard case modules/name/src -> module-name/src
  def modified=path.replaceAll('.*/(.*)$', '$1')
  return modified
}
